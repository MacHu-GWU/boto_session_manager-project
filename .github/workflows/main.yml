# comprehensive github action yml reference: https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions

---
name: CI

on:
  push: # any push event to master will trigger this
    branches: ["main"]
  pull_request: # any pull request to master will trigger this
    branches: ["main"]
  workflow_dispatch: # allows you to manually trigger run

jobs:
  tests:
    name: "${{ matrix.os }} Python ${{ matrix.python-version }}"
    runs-on: "${{ matrix.os }}" # for all available VM runtime, see this: https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners
    env: # define environment variables
      USING_COVERAGE: "3.6,3.7,3.8,3.9"
    strategy:
      matrix:
        os: ["ubuntu-latest", ]
#        python-version: ["3.6", "3.7", "3.8", "3.9"]
        python-version: ["3.8", ] # for debug only
    steps:
      - uses: "actions/checkout@v3" # https://github.com/marketplace/actions/checkout
      - uses: "actions/setup-python@v3" # https://github.com/marketplace/actions/setup-python
        with:
          python-version: "${{ matrix.python-version }}"
      - name: Start LocalStack # https://docs.localstack.cloud/ci/github-actions/
        run: |
          # install LocalStack cli and awslocal
          pip install localstack awscli-local[ver1]
          # Make sure to pull the latest version of the image
          docker pull localstack/localstack
          # Start LocalStack in the background
          localstack start -d
          # Wait 30 seconds for the LocalStack container to become ready before timing out
          echo "Waiting for LocalStack startup..."
          localstack wait -t 30
          echo "Startup complete"
      - name: "Install dependencies on MacOS or Linux"
        env:
          AWS_ACCESS_KEY_ID: localstack
          AWS_SECRET_ACCESS_KEY: localstack
          AWS_DEFAULT_REGION: us-east-1
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install --upgrade pip setuptools wheel virtualenv codecov
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install .
      - name: "Run pytest"
        run: "python -m pytest tests --cov=boto_session_manager"
      - name: "Upload coverage to Codecov"
        if: "contains(env.USING_COVERAGE, matrix.python-version)"
        uses: "codecov/codecov-action@v2" # https://github.com/marketplace/actions/codecov-action
        with:
          fail_ci_if_error: true
